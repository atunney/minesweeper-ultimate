var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.463,1,0.776]],["body/components/AppComponent.html",[0,0.735,1,1.23,2,1.407,3,0.438,4,0.364,5,1.126,6,1.126,7,1.126,8,1.126,9,0.364,10,1.604,11,1.157,12,2.948,13,2.767,14,1.126,15,2.03,16,1.499,17,1.645,18,1.407,19,3.483,20,1.407,21,2.948,22,0.519,23,1.039,24,2.767,25,3.483,26,4.075,27,1.039,28,2.948,29,2.948,30,2.342,31,2.948,32,2.258,33,1.499,34,2.019,35,1.744,36,3.831,37,1.774,38,2.03,39,2.342,40,2.137,41,2.948,42,2.137,43,1.227,44,0.061,45,1.23,46,1.048,47,1.227,48,2.513,49,2.969,50,2.525,51,2.342,52,1.227,53,1.227,54,2.948,55,2.019,56,3.483,57,1.548,58,1.407,59,2.948,60,2.948,61,2.019,62,1.645,63,3.043,64,2.137,65,2.896,66,1.943,67,2.03,68,2.019,69,1.499,70,1.499,71,2.137,72,3.831,73,2.019,74,2.342,75,0.827,76,2.948,77,2.948,78,2.019,79,2.948,80,2.948,81,2.948,82,0.64,83,0.364,84,0.89,85,0.963,86,0.341,87,1.126,88,1.33,89,2.019,90,2.019,91,0.438,92,0.827,93,0.827,94,0.827,95,1.428,96,2.137,97,2.948,98,2.342,99,1.33,100,1.126,101,1.604,102,1.33,103,1.604,104,1.604,105,1.604,106,2.342,107,1.604,108,1.604,109,1.604,110,1.33,111,2.019,112,0.827,113,1.407,114,1.645,115,1.126,116,2.137,117,1.126,118,1.126,119,0.519,120,1.126,121,0.609,122,1.126,123,0.609,124,1.126,125,1.126,126,1.126,127,0.023,128,0.033,129,0.023]],["title/modules/AppModule.html",[130,0.557,131,1.434]],["body/modules/AppModule.html",[1,1.553,3,0.675,4,0.561,9,0.561,16,1.096,44,0.06,82,1.07,83,0.561,86,0.36,91,0.675,112,1.275,119,1.248,121,1.466,123,1.466,127,0.035,128,0.045,129,0.035,130,0.675,131,2.903,132,1.485,133,1.736,134,3.468,135,3.468,136,3.151,137,2.051,138,2.472,139,2.472,140,2.472,141,2.472,142,2.316,143,3.151,144,2.051,145,2.051,146,3.112,147,3.151,148,3.151,149,3.966,150,2.472,151,2.051,152,3.112,153,3.112,154,3.112,155,3.112,156,3.112]],["title/modules/AppRoutingModule.html",[130,0.557,142,1.226]],["body/modules/AppRoutingModule.html",[3,0.826,4,0.686,9,0.686,44,0.06,82,0.973,83,0.686,86,0.441,91,0.826,127,0.043,128,0.051,129,0.043,132,1.816,137,2.508,142,2.141,147,3.024,148,3.565,157,3.806,158,3.806,159,4.488,160,3.145,161,3.024,162,3.806,163,3.806]],["title/components/GridComponent.html",[0,0.463,119,0.661]],["body/components/GridComponent.html",[0,0.59,1,0.379,2,0.974,3,0.272,4,0.226,5,0.7,6,0.7,7,0.7,8,0.7,9,0.368,11,0.988,14,0.7,15,1.673,16,1.235,18,0.974,20,0.974,22,0.323,23,0.909,27,0.719,30,2.05,32,1.561,33,1.574,35,1.678,37,1.738,38,1.953,39,0.997,42,1.139,43,1.153,44,0.061,45,1.116,46,1.099,47,1.153,48,1.139,49,0.827,50,1.346,51,0.997,52,1.235,53,1.235,57,1.302,58,2.346,62,0.7,63,1.622,64,2.571,65,1.346,66,1.139,67,1.561,69,1.592,70,1.554,71,1.139,75,1.717,82,0.71,83,0.226,84,1.059,85,0.599,86,0.344,87,1.956,88,2.156,91,0.272,92,0.515,93,0.515,94,1.219,95,1.437,96,0.7,99,0.827,100,1.44,101,2.05,102,1.346,104,0.997,105,0.997,106,1.622,107,0.997,108,0.997,109,2.599,110,2.624,112,0.515,113,1.231,114,1.139,115,0.7,116,1.659,117,0.7,118,0.7,119,0.765,120,0.7,121,0.379,122,0.7,123,0.379,124,0.7,125,0.7,126,0.7,127,0.014,128,0.023,129,0.014,130,0.835,164,0.827,165,2.311,166,1.346,167,2.311,168,1.139,169,1.44,170,2.05,171,1.622,172,2.05,173,2.05,174,2.599,175,1.659,176,2.042,177,1.659,178,2.042,179,2.362,180,1.622,181,2.362,182,1.701,183,2.05,184,2.05,185,2.042,186,2.042,187,2.042,188,1.622,189,0.515,190,1.255,191,1.419,192,1.419,193,1.047,194,2.042,195,1.058,196,1.959,197,1.139,198,2.785,199,0.837,200,2.042,201,1.44,202,2.042,203,1.701,204,2.042,205,1.622,206,2.156,207,1.622,208,1.255,209,1.959,210,1.139,211,1.255,212,2.042,213,1.255,214,2.362,215,1.255,216,1.956,217,1.255,218,1.346,219,0.997,220,1.701,221,1.701,222,0.827,223,0.997,224,2.073,225,1.255,226,1.255,227,1.255,228,2.05,229,1.346,230,1.255,231,2.042,232,1.255,233,2.042,234,0.997,235,1.255,236,2.149,237,2.042,238,1.255,239,1.255,240,1.255,241,1.255,242,1.255,243,1.346,244,1.255,245,1.255,246,0.997,247,1.701,248,0.997,249,0.7,250,0.827,251,0.827,252,1.346,253,0.827,254,0.997,255,1.561,256,0.974,257,2.362,258,1.622,259,2.05,260,2.435,261,1.346,262,1.959,263,0.827,264,0.997,265,0.997,266,1.622,267,2.05,268,2.362,269,1.622,270,0.974,271,0.997,272,0.997,273,1.346,274,0.515,275,0.827,276,0.997,277,0.997,278,0.997,279,2.785,280,0.997,281,0.997,282,0.997,283,0.997,284,2.042,285,3.982,286,2.042,287,2.042,288,2.042,289,3.271,290,2.973,291,2.042,292,1.255,293,1.622,294,0.827,295,1.255,296,1.255,297,1.255,298,1.255,299,1.255,300,1.255,301,1.255,302,2.973,303,3.851,304,2.042,305,2.973,306,2.973,307,1.255,308,1.255,309,1.255,310,1.255]],["title/injectables/GridService.html",[191,1.226,311,0.906]],["body/injectables/GridService.html",[3,0.253,4,0.211,9,0.211,11,1.263,17,0.652,22,0.3,23,0.678,27,0.678,32,1.503,33,1.583,35,1.877,37,1.614,40,2.672,42,2.089,43,1.443,44,0.061,45,1.237,46,1.129,47,1.443,52,1.583,53,1.11,58,2.249,64,2.644,67,1.617,69,1.319,70,1.319,82,0.533,83,0.211,86,0.223,87,1.37,91,0.253,93,0.479,95,1.591,96,1.891,102,2.557,127,0.013,128,0.022,129,0.013,130,0.533,175,2.613,189,0.479,191,0.919,192,1.503,193,1.003,195,1.167,196,1.269,197,2.089,199,1.535,203,1.618,210,0.652,214,3.083,216,2.787,218,2.634,219,2.502,220,2.7,221,2.853,222,1.877,223,2.262,224,1.907,229,0.77,234,1.529,236,2.23,243,2.233,249,0.652,250,0.77,251,1.269,253,0.77,255,2.203,256,1.503,260,2.233,261,1.877,262,2.468,263,1.877,270,1.851,274,1.006,275,1.269,311,0.678,312,0.652,313,0.928,314,1.269,315,1.925,316,1.925,317,1.925,318,1.925,319,1.925,320,1.925,321,2.848,322,1.925,323,1.925,324,2.848,325,1.925,326,1.925,327,1.168,328,1.925,329,1.529,330,1.925,331,1.925,332,3.149,333,1.168,334,4.184,335,2.848,336,1.925,337,3.583,338,1.925,339,1.168,340,4.87,341,4.58,342,1.168,343,1.168,344,3.149,345,1.925,346,1.168,347,1.925,348,2.848,349,1.925,350,1.925,351,4.097,352,1.168,353,1.925,354,1.925,355,1.168,356,2.848,357,1.925,358,1.168,359,1.168,360,1.168,361,1.168,362,1.168,363,1.925,364,1.925,365,1.925,366,1.168,367,1.168,368,1.168,369,1.168,370,0.928,371,1.168,372,1.168,373,1.168,374,2.455,375,1.168,376,1.925,377,1.168,378,1.168,379,0.928,380,1.168,381,0.928,382,1.168,383,1.925,384,1.168,385,1.529,386,1.168,387,1.168,388,2.848,389,3.389,390,1.168,391,0.77,392,1.925,393,1.168,394,1.925,395,1.168,396,1.925,397,2.455,398,1.925,399,1.168,400,1.168,401,1.168,402,1.168,403,3.583,404,1.925,405,3.149,406,1.529,407,1.168,408,2.455,409,1.925,410,1.925,411,1.168,412,1.168,413,1.168,414,1.168,415,1.168,416,1.925,417,1.168,418,1.168,419,1.168,420,1.168,421,1.168,422,1.168,423,1.168,424,1.168]],["title/injectables/LoggerService.html",[84,0.776,311,0.906]],["body/injectables/LoggerService.html",[3,0.797,4,0.663,9,0.663,11,1.11,17,2.05,44,0.061,82,0.797,83,0.663,84,1.42,86,0.509,91,0.797,92,1.802,94,1.802,127,0.042,128,0.05,129,0.042,189,1.506,311,1.549,312,2.05,314,2.897,391,2.422,425,2.92,426,3.675,427,3.675,428,3.675]],["title/components/SettingsComponent.html",[0,0.463,121,0.776]],["body/components/SettingsComponent.html",[0,0.738,1,0.616,2,1.417,3,0.442,4,0.368,5,1.138,6,1.138,7,1.138,8,1.138,9,0.368,11,1.162,14,1.138,15,2.038,16,1.505,18,1.417,20,1.417,22,0.524,23,1.046,27,1.046,33,1.505,35,1.578,37,1.505,38,1.837,40,1.657,43,1.234,44,0.061,45,1.235,46,1.098,47,1.234,48,2.147,49,2.537,52,1.046,53,1.234,57,1.356,62,1.657,69,1.505,70,1.505,71,1.657,75,1.75,82,0.76,83,0.368,84,1.162,85,0.973,86,0.344,91,0.442,92,0.836,93,0.836,94,1.436,95,1.578,100,1.955,112,0.836,113,1.417,114,1.657,115,1.138,116,2.147,117,1.138,118,1.138,119,0.524,120,1.138,121,1.162,122,1.138,123,0.616,124,1.138,125,1.138,126,1.138,127,0.023,128,0.034,129,0.023,130,0.76,165,1.344,167,1.344,168,1.657,169,1.955,175,1.138,177,1.138,181,2.783,182,1.957,189,0.836,192,2.233,193,1.356,195,1.218,199,2.001,201,1.657,205,2.36,206,2.309,220,1.957,222,1.957,236,2.382,247,1.957,249,1.138,255,1.417,274,1.852,294,1.957,329,2.36,381,3.058,406,1.62,429,1.62,430,3.504,431,2.97,432,3.504,433,3.504,434,2.97,435,2.97,436,2.039,437,2.97,438,2.36,439,2.36,440,2.97,441,2.97,442,2.97,443,2.97,444,2.039,445,2.36,446,2.36,447,2.36,448,2.36,449,2.97,450,2.97,451,2.97,452,2.039,453,2.97,454,4.091,455,1.957,456,2.97,457,2.039,458,2.039,459,2.97,460,2.039,461,2.039,462,2.039,463,2.039,464,2.039,465,2.039,466,2.039,467,2.039,468,2.039,469,2.039,470,2.039,471,2.039]],["title/injectables/SettingsService.html",[193,0.906,311,0.906]],["body/injectables/SettingsService.html",[3,0.505,4,0.42,9,0.42,11,0.986,17,1.3,22,0.599,23,1.151,27,1.151,33,1.615,35,1.339,37,1.732,40,1.823,43,0.821,44,0.061,45,0.703,46,1.148,47,0.821,52,0.821,53,0.821,58,2.13,69,1.649,70,1.697,75,1.547,82,0.709,83,0.42,86,0.378,91,0.505,95,0.955,127,0.026,128,0.037,129,0.026,130,0.505,166,1.535,189,1.547,192,1.559,193,1.151,195,1.339,197,1.823,199,2.076,203,2.153,209,2.153,252,2.153,255,2.345,274,1.83,311,1.151,312,1.3,314,2.153,370,3.547,391,1.535,438,2.595,445,3.778,446,1.851,447,1.851,448,1.851,455,2.153,472,1.851,473,4.465,474,4.465,475,3.267,476,3.267,477,2.595,478,3.267,479,2.329,480,3.267,481,4.465,482,4.09,483,2.329,484,3.267,485,2.329,486,3.267,487,2.329,488,2.329,489,3.267,490,2.329,491,3.267,492,3.773,493,3.773,494,2.329,495,2.329,496,2.329,497,3.267,498,2.329,499,3.267,500,3.267,501,3.267,502,3.267,503,3.267,504,3.267,505,2.329]],["title/classes/Square.html",[86,0.298,224,1.226]],["body/classes/Square.html",[0,0.579,3,0.381,4,0.317,9,0.579,11,0.803,15,0.839,16,0.619,18,0.839,20,0.839,22,0.452,23,1.261,27,0.937,32,1.707,33,1.48,35,1.576,37,1.638,38,1.707,42,1.996,43,0.619,44,0.061,45,0.531,46,0.989,47,0.619,50,1.158,52,0.937,53,1.131,57,1.131,58,2.267,64,2.73,66,1.484,67,1.707,69,1.674,70,1.657,71,0.98,75,1.576,82,0.834,83,0.317,84,0.969,85,0.839,86,0.445,87,2.256,88,1.753,91,0.381,92,0.72,93,0.72,94,1.09,95,1.658,96,0.98,100,1.484,113,0.839,119,0.452,127,0.02,128,0.03,129,0.02,130,0.877,164,1.158,165,2.115,166,1.158,167,2.115,168,0.98,169,1.484,170,1.396,171,1.396,172,1.396,173,1.396,174,2.113,175,1.484,177,0.98,179,3.213,182,1.158,183,1.396,184,1.396,189,0.72,191,1.269,192,1.269,193,0.937,195,1.315,196,1.753,197,0.98,198,2.549,199,0.72,201,0.98,206,2.115,207,1.396,209,1.753,210,0.98,216,2.256,218,1.753,221,1.753,224,1.834,228,1.396,229,1.158,236,2.594,243,1.158,246,1.396,247,2.115,248,1.396,249,0.98,250,1.158,251,1.753,252,2.358,253,1.753,254,2.113,255,2.244,256,1.707,257,3.436,258,2.549,259,3.054,260,2.918,261,2.358,262,2.665,263,1.753,264,2.113,265,1.396,266,2.113,267,2.549,268,2.843,269,2.113,270,1.269,271,1.396,272,2.113,273,2.358,274,1.09,275,1.753,276,2.113,277,2.113,278,2.843,279,3.213,280,1.396,281,1.396,282,1.396,506,1.757,507,1.757,508,1.757,509,1.757,510,1.757,511,1.757,512,1.757,513,1.757]],["title/components/TimerComponent.html",[0,0.463,123,0.776]],["body/components/TimerComponent.html",[0,0.833,1,0.624,2,1.432,3,0.449,4,0.373,5,1.154,6,1.154,7,1.154,8,1.154,9,0.373,11,0.624,13,2.806,14,1.154,15,2.048,16,1.512,18,1.432,20,1.432,22,0.532,23,1.057,24,2.806,27,1.057,32,1.849,33,1.512,37,1.56,38,1.685,43,0.729,44,0.061,45,1.066,46,0.908,47,0.729,48,1.154,52,1.244,53,1.365,57,1.244,62,2.295,65,1.978,66,1.674,67,1.432,69,1.365,70,1.365,75,1.448,82,0.651,83,0.373,84,0.906,85,0.987,86,0.347,91,0.449,92,0.848,93,0.848,94,0.848,98,1.643,99,1.363,110,1.363,112,0.848,113,1.432,114,1.674,115,1.154,116,2.162,117,1.154,118,1.154,119,0.532,120,1.154,121,0.624,122,1.154,123,1.17,124,2.807,125,1.154,126,1.154,127,0.023,128,0.034,129,0.023,130,0.766,144,2.328,168,1.674,169,1.97,177,2.162,180,2.384,188,2.384,195,1.23,201,1.97,256,0.987,270,0.987,274,0.848,283,1.643,293,1.643,294,1.363,379,1.643,514,1.643,515,3.532,516,3.001,517,4.114,518,3.875,519,3.875,520,2.068,521,3.875,522,3.001,523,3.001,524,3.001,525,3.532,526,3.532,527,2.068,528,3.001,529,3.001,530,3.001,531,3.001,532,3.001,533,3.001,534,3.001,535,3.001,536,2.068,537,3.875,538,3.875,539,2.068,540,3.001,541,2.068,542,2.068,543,2.068,544,2.068,545,3.001,546,2.068,547,2.068,548,2.068,549,2.068,550,3.001,551,3.001,552,3.001,553,2.068,554,3.001,555,2.068,556,3.875,557,2.068,558,3.532,559,4.114,560,2.068,561,1.643,562,1.643,563,2.068,564,2.068]],["title/coverage.html",[565,2.778]],["body/coverage.html",[0,0.873,1,1.09,9,0.651,10,2.867,44,0.059,46,0.928,57,1.271,84,1.09,86,0.418,103,4.08,119,0.928,121,1.09,123,1.09,127,0.041,128,0.049,129,0.041,164,2.865,191,1.722,193,1.271,224,1.722,311,1.644,313,2.867,425,2.867,429,2.867,472,2.867,514,2.867,565,2.867,566,3.609,567,3.609,568,3.609,569,4.348,570,3.609,571,3.609,572,4.348,573,3.609,574,3.609,575,3.609,576,3.609]],["title/dependencies.html",[133,1.723,577,2.152]],["body/dependencies.html",[44,0.06,83,0.681,127,0.043,128,0.051,129,0.043,133,2.108,150,3.55,151,2.945,161,3.002,578,3.779,579,4.113,580,3.779,581,3.779,582,3.779,583,3.779,584,3.779,585,3.779,586,3.779,587,3.779,588,3.779,589,3.779]],["title/index.html",[22,0.553,74,1.709,439,1.709]],["body/index.html",[0,0.811,4,0.599,16,1.171,44,0.047,45,1.004,57,1.171,127,0.038,128,0.047,129,0.038,145,2.191,210,1.855,273,2.191,385,2.641,455,2.191,579,2.641,590,3.325,591,4.135,592,4.5,593,4.5,594,3.325,595,3.325,596,4.135,597,4.843,598,5.006,599,3.325,600,3.325,601,3.325,602,3.325,603,3.325,604,3.325,605,3.325,606,3.325,607,3.325,608,4.5,609,4.5,610,3.325,611,4.843,612,3.325,613,3.325,614,3.325,615,3.325,616,3.325,617,3.325,618,4.135,619,4.135,620,4.708,621,3.325,622,4.135,623,4.135,624,3.325,625,4.708,626,3.325,627,3.325,628,3.325,629,4.5,630,3.325,631,3.325,632,2.191,633,3.325,634,3.325,635,3.325]],["title/modules.html",[132,1.668]],["body/modules.html",[44,0.053,127,0.046,128,0.053,129,0.046,131,2.252,132,1.926,142,1.926,151,2.66,477,3.206,636,4.036,637,4.036,638,4.644,639,4.036]],["title/overview.html",[632,2.304]],["body/overview.html",[1,1.533,2,1.699,44,0.058,86,0.412,112,1.46,119,1.193,121,1.401,123,1.401,127,0.04,128,0.049,129,0.04,130,0.772,131,2.929,132,1.699,133,1.987,134,2.829,135,2.829,136,2.829,137,2.347,138,2.829,139,2.829,140,2.829,141,2.829,142,2.213,143,3.426,144,2.347,145,2.347,256,1.699,270,1.699,312,1.987,561,2.829,562,2.829,632,2.347,640,3.561]],["title/routes.html",[160,2.304]],["body/routes.html",[44,0.053,127,0.047,128,0.053,129,0.047,160,2.721]],["title/miscellaneous/typealiases.html",[641,1.709,642,3.088]],["body/miscellaneous/typealiases.html",[22,1.023,44,0.052,46,1.25,127,0.045,128,0.052,129,0.045,199,1.887,216,2.568,641,3.158,643,3.976,644,3.976,645,3.976,646,3.976,647,4.604,648,3.976]]],"invertedIndex":[["",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":270,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["0.11.3",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["00",{"_index":560,"title":{},"body":{"components/TimerComponent.html":{}}}],["000",{"_index":538,"title":{},"body":{"components/TimerComponent.html":{}}}],["1",{"_index":256,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["1/1",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":492,"title":{},"body":{"injectables/SettingsService.html":{}}}],["100",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["1000",{"_index":552,"title":{},"body":{"components/TimerComponent.html":{}}}],["11.2.1",{"_index":579,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["15/15",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":493,"title":{},"body":{"injectables/SettingsService.html":{}}}],["161616",{"_index":111,"title":{},"body":{"components/AppComponent.html":{}}}],["164",{"_index":305,"title":{},"body":{"components/GridComponent.html":{}}}],["16px",{"_index":291,"title":{},"body":{"components/GridComponent.html":{}}}],["18/18",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":561,"title":{},"body":{"components/TimerComponent.html":{},"overview.html":{}}}],["2.0.0",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["20px",{"_index":470,"title":{},"body":{"components/SettingsComponent.html":{}}}],["2px",{"_index":286,"title":{},"body":{"components/GridComponent.html":{}}}],["3",{"_index":562,"title":{},"body":{"components/TimerComponent.html":{},"overview.html":{}}}],["30",{"_index":495,"title":{},"body":{"injectables/SettingsService.html":{}}}],["4",{"_index":640,"title":{},"body":{"overview.html":{}}}],["40",{"_index":494,"title":{},"body":{"injectables/SettingsService.html":{}}}],["6.6.0",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["7/7",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["808080",{"_index":289,"title":{},"body":{"components/GridComponent.html":{}}}],["8f3232",{"_index":306,"title":{},"body":{"components/GridComponent.html":{}}}],["91",{"_index":303,"title":{},"body":{"components/GridComponent.html":{}}}],["99",{"_index":496,"title":{},"body":{"injectables/SettingsService.html":{}}}],["accessors",{"_index":188,"title":{},"body":{"components/GridComponent.html":{},"components/TimerComponent.html":{}}}],["accordingly",{"_index":90,"title":{},"body":{"components/AppComponent.html":{}}}],["actual_component",{"_index":126,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["adjacent",{"_index":340,"title":{},"body":{"injectables/GridService.html":{}}}],["adjacentsquares",{"_index":409,"title":{},"body":{"injectables/GridService.html":{}}}],["adjacentsquares.push({row",{"_index":410,"title":{},"body":{"injectables/GridService.html":{}}}],["aliases",{"_index":643,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["angular",{"_index":592,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":83,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":161,"title":{},"body":{"modules/AppRoutingModule.html":{},"dependencies.html":{}}}],["angularapp",{"_index":590,"title":{},"body":{"index.html":{}}}],["app",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["app.component",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.css",{"_index":19,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":21,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["application",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/TimerComponent.html":{}}}],["application's",{"_index":80,"title":{},"body":{"components/AppComponent.html":{}}}],["appmodule",{"_index":131,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":361,"title":{},"body":{"injectables/GridService.html":{}}}],["approutingmodule",{"_index":142,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["array",{"_index":197,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["arrayelem",{"_index":411,"title":{},"body":{"injectables/GridService.html":{}}}],["arrayelem.col",{"_index":414,"title":{},"body":{"injectables/GridService.html":{}}}],["arrayelem.row",{"_index":412,"title":{},"body":{"injectables/GridService.html":{}}}],["artifacts",{"_index":612,"title":{},"body":{"index.html":{}}}],["automatically",{"_index":603,"title":{},"body":{"index.html":{}}}],["available",{"_index":477,"title":{},"body":{"injectables/SettingsService.html":{},"modules.html":{}}}],["back",{"_index":525,"title":{},"body":{"components/TimerComponent.html":{}}}],["background",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["base",{"_index":12,"title":{},"body":{"components/AppComponent.html":{}}}],["based",{"_index":203,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/SettingsService.html":{}}}],["beginner",{"_index":446,"title":{},"body":{"components/SettingsComponent.html":{},"injectables/SettingsService.html":{}}}],["being",{"_index":222,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{}}}],["block",{"_index":468,"title":{},"body":{"components/SettingsComponent.html":{}}}],["board",{"_index":381,"title":{},"body":{"injectables/GridService.html":{},"components/SettingsComponent.html":{}}}],["bold",{"_index":297,"title":{},"body":{"components/GridComponent.html":{}}}],["bomb",{"_index":307,"title":{},"body":{"components/GridComponent.html":{}}}],["boolean",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["bootstrap",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["border",{"_index":285,"title":{},"body":{"components/GridComponent.html":{}}}],["browse",{"_index":638,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browsermodule",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["build",{"_index":611,"title":{},"body":{"index.html":{}}}],["button",{"_index":454,"title":{},"body":{"components/SettingsComponent.html":{}}}],["buttons",{"_index":449,"title":{},"body":{"components/SettingsComponent.html":{}}}],["c0c0c0",{"_index":292,"title":{},"body":{"components/GridComponent.html":{}}}],["center",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["change",{"_index":455,"title":{},"body":{"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"index.html":{}}}],["changedifficulty",{"_index":475,"title":{},"body":{"injectables/SettingsService.html":{}}}],["changedifficulty(label",{"_index":478,"title":{},"body":{"injectables/SettingsService.html":{}}}],["check",{"_index":385,"title":{},"body":{"injectables/GridService.html":{},"index.html":{}}}],["choose",{"_index":440,"title":{},"body":{"components/SettingsComponent.html":{}}}],["chooses",{"_index":480,"title":{},"body":{"injectables/SettingsService.html":{}}}],["chosen",{"_index":482,"title":{},"body":{"injectables/SettingsService.html":{}}}],["class",{"_index":86,"title":{"classes/Square.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":506,"title":{},"body":{"classes/Square.html":{}}}],["cli",{"_index":593,"title":{},"body":{"index.html":{}}}],["clicks",{"_index":276,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["cluster_appmodule",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["code",{"_index":606,"title":{},"body":{"index.html":{}}}],["col",{"_index":262,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["color",{"_index":110,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/TimerComponent.html":{}}}],["column",{"_index":263,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["columns",{"_index":486,"title":{},"body":{"injectables/SettingsService.html":{}}}],["command",{"_index":633,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["console.log(msg",{"_index":428,"title":{},"body":{"injectables/LoggerService.html":{}}}],["const",{"_index":162,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["constructor",{"_index":189,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["constructor(grid",{"_index":190,"title":{},"body":{"components/GridComponent.html":{}}}],["constructor(logger",{"_index":436,"title":{},"body":{"components/SettingsComponent.html":{}}}],["constructor(private",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["constructor(row",{"_index":264,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["constructor(settings",{"_index":327,"title":{},"body":{"injectables/GridService.html":{}}}],["contain",{"_index":354,"title":{},"body":{"injectables/GridService.html":{}}}],["containing",{"_index":252,"title":{},"body":{"components/GridComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["contains",{"_index":251,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["content",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["coord",{"_index":216,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{},"miscellaneous/typealiases.html":{}}}],["coord.col",{"_index":415,"title":{},"body":{"injectables/GridService.html":{}}}],["coord.row",{"_index":413,"title":{},"body":{"injectables/GridService.html":{}}}],["coordarray",{"_index":332,"title":{},"body":{"injectables/GridService.html":{}}}],["coordinate",{"_index":221,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["coordinates",{"_index":219,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{}}}],["coordincoordarray",{"_index":315,"title":{},"body":{"injectables/GridService.html":{}}}],["coordincoordarray(coord",{"_index":331,"title":{},"body":{"injectables/GridService.html":{}}}],["correspond",{"_index":441,"title":{},"body":{"components/SettingsComponent.html":{}}}],["coverage",{"_index":565,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":243,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["cursor",{"_index":298,"title":{},"body":{"components/GridComponent.html":{}}}],["data",{"_index":229,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["deal",{"_index":233,"title":{},"body":{"components/GridComponent.html":{}}}],["declarations",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["default",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/TimerComponent.html":{}}}],["defined",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["dependencies",{"_index":133,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":369,"title":{},"body":{"injectables/GridService.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["designated",{"_index":218,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["details",{"_index":198,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["determine",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["determining",{"_index":522,"title":{},"body":{"components/TimerComponent.html":{}}}],["dev",{"_index":600,"title":{},"body":{"index.html":{}}}],["development",{"_index":595,"title":{},"body":{"index.html":{}}}],["difficulties",{"_index":445,"title":{},"body":{"components/SettingsComponent.html":{},"injectables/SettingsService.html":{}}}],["difficulty",{"_index":199,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"miscellaneous/typealiases.html":{}}}],["difficulty.label",{"_index":505,"title":{},"body":{"injectables/SettingsService.html":{}}}],["difficultylabel",{"_index":467,"title":{},"body":{"components/SettingsComponent.html":{}}}],["difficultylabels",{"_index":432,"title":{},"body":{"components/SettingsComponent.html":{}}}],["difficultylabel}}new",{"_index":471,"title":{},"body":{"components/SettingsComponent.html":{}}}],["digits",{"_index":534,"title":{},"body":{"components/TimerComponent.html":{}}}],["directive",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["directives",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":610,"title":{},"body":{"index.html":{}}}],["directory",{"_index":615,"title":{},"body":{"index.html":{}}}],["discovers",{"_index":41,"title":{},"body":{"components/AppComponent.html":{}}}],["display",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["displayed",{"_index":450,"title":{},"body":{"components/SettingsComponent.html":{}}}],["displaying",{"_index":165,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["dist",{"_index":614,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["double",{"_index":532,"title":{},"body":{"components/TimerComponent.html":{}}}],["dynamic",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":48,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["e.target.value",{"_index":464,"title":{},"body":{"components/SettingsComponent.html":{}}}],["e2e",{"_index":626,"title":{},"body":{"index.html":{}}}],["element",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["empty",{"_index":196,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["end",{"_index":625,"title":{},"body":{"index.html":{}}}],["entire",{"_index":336,"title":{},"body":{"injectables/GridService.html":{}}}],["event",{"_index":49,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{}}}],["eventemitter",{"_index":206,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["execute",{"_index":622,"title":{},"body":{"index.html":{}}}],["expert",{"_index":448,"title":{},"body":{"components/SettingsComponent.html":{},"injectables/SettingsService.html":{}}}],["export",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["exports",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"overview.html":{}}}],["f5f5f5",{"_index":290,"title":{},"body":{"components/GridComponent.html":{}}}],["false",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["files",{"_index":605,"title":{},"body":{"index.html":{}}}],["first",{"_index":204,"title":{},"body":{"components/GridComponent.html":{}}}],["flag",{"_index":273,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{},"index.html":{}}}],["flagged",{"_index":259,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["flagging",{"_index":235,"title":{},"body":{"components/GridComponent.html":{}}}],["flex",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["font",{"_index":293,"title":{},"body":{"components/GridComponent.html":{},"components/TimerComponent.html":{}}}],["full",{"_index":357,"title":{},"body":{"injectables/GridService.html":{}}}],["function",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["further",{"_index":628,"title":{},"body":{"index.html":{}}}],["game",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["gameover",{"_index":172,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["gameovertriggered",{"_index":183,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["gamestopped",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"components/TimerComponent.html":{}}}],["generate",{"_index":608,"title":{},"body":{"index.html":{}}}],["generated",{"_index":210,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{},"index.html":{}}}],["getadjacentsquares",{"_index":316,"title":{},"body":{"injectables/GridService.html":{}}}],["getadjacentsquares(square",{"_index":338,"title":{},"body":{"injectables/GridService.html":{}}}],["getsquarewithcoord",{"_index":176,"title":{},"body":{"components/GridComponent.html":{}}}],["getsquarewithcoord(coord",{"_index":215,"title":{},"body":{"components/GridComponent.html":{}}}],["getsurroundingsquares",{"_index":317,"title":{},"body":{"injectables/GridService.html":{}}}],["getsurroundingsquares(square",{"_index":342,"title":{},"body":{"injectables/GridService.html":{}}}],["getting",{"_index":439,"title":{"index.html":{}},"body":{"components/SettingsComponent.html":{}}}],["getvalue",{"_index":318,"title":{},"body":{"injectables/GridService.html":{}}}],["getvalue(row",{"_index":345,"title":{},"body":{"injectables/GridService.html":{}}}],["getzerogroup",{"_index":319,"title":{},"body":{"injectables/GridService.html":{}}}],["getzerogroup(square",{"_index":350,"title":{},"body":{"injectables/GridService.html":{}}}],["go",{"_index":631,"title":{},"body":{"index.html":{}}}],["graph",{"_index":639,"title":{},"body":{"modules.html":{}}}],["grid",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["grid'},{'name",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["grid.component.css",{"_index":170,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["grid.component.html",{"_index":171,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["grid.service",{"_index":248,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["grid/grid.component",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["gridcomponent",{"_index":119,"title":{"components/GridComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["gridservice",{"_index":191,"title":{"injectables/GridService.html":{}},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{},"coverage.html":{}}}],["gridstring",{"_index":173,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["group",{"_index":356,"title":{},"body":{"injectables/GridService.html":{}}}],["height",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{}}}],["help",{"_index":629,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":258,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["hold",{"_index":209,"title":{},"body":{"components/GridComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["host",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/TimerComponent.html":{}}}],["hostbinding",{"_index":246,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["hostbindings",{"_index":185,"title":{},"body":{"components/GridComponent.html":{}}}],["html",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["http://localhost:4200",{"_index":602,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["image",{"_index":309,"title":{},"body":{"components/GridComponent.html":{}}}],["implements",{"_index":168,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["import",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["imports",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["include",{"_index":330,"title":{},"body":{"injectables/GridService.html":{}}}],["incrementing",{"_index":540,"title":{},"body":{"components/TimerComponent.html":{}}}],["increments",{"_index":528,"title":{},"body":{"components/TimerComponent.html":{}}}],["incrementsurroundingsquares",{"_index":320,"title":{},"body":{"injectables/GridService.html":{}}}],["incrementsurroundingsquares(square",{"_index":358,"title":{},"body":{"injectables/GridService.html":{}}}],["incrementtimer",{"_index":518,"title":{},"body":{"components/TimerComponent.html":{}}}],["index",{"_index":22,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["initialize",{"_index":228,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["initializegridwithzeros",{"_index":321,"title":{},"body":{"injectables/GridService.html":{}}}],["initializes",{"_index":195,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["injectable",{"_index":311,"title":{"injectables/GridService.html":{},"injectables/LoggerService.html":{},"injectables/SettingsService.html":{}},"body":{"injectables/GridService.html":{},"injectables/LoggerService.html":{},"injectables/SettingsService.html":{},"coverage.html":{}}}],["injectables",{"_index":312,"title":{},"body":{"injectables/GridService.html":{},"injectables/LoggerService.html":{},"injectables/SettingsService.html":{},"overview.html":{}}}],["injectible",{"_index":314,"title":{},"body":{"injectables/GridService.html":{},"injectables/LoggerService.html":{},"injectables/SettingsService.html":{}}}],["input",{"_index":201,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["inputs",{"_index":180,"title":{},"body":{"components/GridComponent.html":{},"components/TimerComponent.html":{}}}],["insertion",{"_index":365,"title":{},"body":{"injectables/GridService.html":{}}}],["insertmines",{"_index":322,"title":{},"body":{"injectables/GridService.html":{}}}],["insertmines(nummines",{"_index":366,"title":{},"body":{"injectables/GridService.html":{}}}],["intermediate",{"_index":447,"title":{},"body":{"components/SettingsComponent.html":{},"injectables/SettingsService.html":{}}}],["ismine",{"_index":323,"title":{},"body":{"injectables/GridService.html":{}}}],["ismine(square",{"_index":372,"title":{},"body":{"injectables/GridService.html":{}}}],["items",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["justify",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["karma",{"_index":624,"title":{},"body":{"index.html":{}}}],["keep",{"_index":388,"title":{},"body":{"injectables/GridService.html":{}}}],["label",{"_index":481,"title":{},"body":{"injectables/SettingsService.html":{}}}],["larger",{"_index":564,"title":{},"body":{"components/TimerComponent.html":{}}}],["legend",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["literal",{"_index":647,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["located",{"_index":261,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["log",{"_index":426,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":94,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["logger.service",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["loggerservice",{"_index":84,"title":{"injectables/LoggerService.html":{}},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{}}}],["logic",{"_index":166,"title":{},"body":{"components/GridComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["loses",{"_index":543,"title":{},"body":{"components/TimerComponent.html":{}}}],["margin",{"_index":469,"title":{},"body":{"components/SettingsComponent.html":{}}}],["matching",{"_index":128,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{}}}],["metadata",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["methods",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["mine",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["mines",{"_index":40,"title":{},"body":{"components/AppComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{}}}],["minesweeper",{"_index":76,"title":{},"body":{"components/AppComponent.html":{}}}],["miscellaneous",{"_index":641,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["modified",{"_index":364,"title":{},"body":{"injectables/GridService.html":{}}}],["modify",{"_index":253,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["module",{"_index":130,"title":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["modules",{"_index":132,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":630,"title":{},"body":{"index.html":{}}}],["mouseevent",{"_index":231,"title":{},"body":{"components/GridComponent.html":{}}}],["msg",{"_index":427,"title":{},"body":{"injectables/LoggerService.html":{}}}],["name",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["navigate",{"_index":601,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":530,"title":{},"body":{"components/TimerComponent.html":{}}}],["needs",{"_index":523,"title":{},"body":{"components/TimerComponent.html":{}}}],["new",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{},"index.html":{}}}],["newgame",{"_index":181,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{}}}],["newgamerenderfinished",{"_index":184,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["newgametriggered",{"_index":25,"title":{},"body":{"components/AppComponent.html":{}}}],["ng",{"_index":598,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{}}}],["ngoninit",{"_index":177,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["none",{"_index":300,"title":{},"body":{"components/GridComponent.html":{}}}],["nothing",{"_index":237,"title":{},"body":{"components/GridComponent.html":{}}}],["number",{"_index":255,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["numbered",{"_index":348,"title":{},"body":{"injectables/GridService.html":{}}}],["numcols",{"_index":473,"title":{},"body":{"injectables/SettingsService.html":{}}}],["nummines",{"_index":370,"title":{},"body":{"injectables/GridService.html":{},"injectables/SettingsService.html":{}}}],["numrows",{"_index":474,"title":{},"body":{"injectables/SettingsService.html":{}}}],["onchange",{"_index":434,"title":{},"body":{"components/SettingsComponent.html":{}}}],["onchange(e",{"_index":443,"title":{},"body":{"components/SettingsComponent.html":{}}}],["one",{"_index":438,"title":{},"body":{"components/SettingsComponent.html":{},"injectables/SettingsService.html":{}}}],["ongameovertriggered",{"_index":28,"title":{},"body":{"components/AppComponent.html":{}}}],["ongameovertriggered(e",{"_index":31,"title":{},"body":{"components/AppComponent.html":{}}}],["oninit",{"_index":169,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["onmousedown",{"_index":178,"title":{},"body":{"components/GridComponent.html":{}}}],["onmousedown(e",{"_index":230,"title":{},"body":{"components/GridComponent.html":{}}}],["onnewgamerender",{"_index":29,"title":{},"body":{"components/AppComponent.html":{}}}],["onnewgamerender(e",{"_index":54,"title":{},"body":{"components/AppComponent.html":{}}}],["onsubmit",{"_index":435,"title":{},"body":{"components/SettingsComponent.html":{}}}],["onsubmit(e",{"_index":451,"title":{},"body":{"components/SettingsComponent.html":{}}}],["ont",{"_index":207,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["optional",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["otherwise",{"_index":337,"title":{},"body":{"injectables/GridService.html":{}}}],["out",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":247,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["outputs",{"_index":182,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["over",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"classes/Square.html":{}}}],["overview",{"_index":632,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":577,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":635,"title":{},"body":{"index.html":{}}}],["param",{"_index":95,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["parameters",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["parseint(this.time",{"_index":555,"title":{},"body":{"components/TimerComponent.html":{}}}],["pause",{"_index":546,"title":{},"body":{"components/TimerComponent.html":{}}}],["pauses",{"_index":547,"title":{},"body":{"components/TimerComponent.html":{}}}],["pixels",{"_index":212,"title":{},"body":{"components/GridComponent.html":{}}}],["place",{"_index":371,"title":{},"body":{"injectables/GridService.html":{}}}],["placed",{"_index":382,"title":{},"body":{"injectables/GridService.html":{}}}],["player",{"_index":274,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["populate",{"_index":368,"title":{},"body":{"injectables/GridService.html":{}}}],["presses",{"_index":453,"title":{},"body":{"components/SettingsComponent.html":{}}}],["pressing",{"_index":456,"title":{},"body":{"components/SettingsComponent.html":{}}}],["private",{"_index":175,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["prod",{"_index":616,"title":{},"body":{"index.html":{}}}],["production",{"_index":617,"title":{},"body":{"index.html":{}}}],["project",{"_index":591,"title":{},"body":{"index.html":{}}}],["properties",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["protractor",{"_index":627,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":391,"title":{},"body":{"injectables/GridService.html":{},"injectables/LoggerService.html":{},"injectables/SettingsService.html":{}}}],["providers",{"_index":136,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["random",{"_index":380,"title":{},"body":{"injectables/GridService.html":{}}}],["reached",{"_index":535,"title":{},"body":{"components/TimerComponent.html":{}}}],["red",{"_index":283,"title":{},"body":{"components/GridComponent.html":{},"components/TimerComponent.html":{}}}],["reference",{"_index":634,"title":{},"body":{"index.html":{}}}],["reload",{"_index":604,"title":{},"body":{"index.html":{}}}],["render",{"_index":56,"title":{},"body":{"components/AppComponent.html":{}}}],["reset",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"components/TimerComponent.html":{},"overview.html":{}}}],["resetgrid",{"_index":324,"title":{},"body":{"injectables/GridService.html":{}}}],["resets",{"_index":376,"title":{},"body":{"injectables/GridService.html":{}}}],["resettimer",{"_index":519,"title":{},"body":{"components/TimerComponent.html":{}}}],["resettimer(e",{"_index":563,"title":{},"body":{"components/TimerComponent.html":{}}}],["result",{"_index":127,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"routes.html":{},"miscellaneous/typealiases.html":{}}}],["resume",{"_index":548,"title":{},"body":{"components/TimerComponent.html":{}}}],["return",{"_index":334,"title":{},"body":{"injectables/GridService.html":{}}}],["returns",{"_index":52,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["rgb(250",{"_index":302,"title":{},"body":{"components/GridComponent.html":{}}}],["rgb(255",{"_index":304,"title":{},"body":{"components/GridComponent.html":{}}}],["right",{"_index":275,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["root",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"injectables/SettingsService.html":{}}}],["root'},{'name",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["routermodule",{"_index":159,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":163,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routes",{"_index":160,"title":{"routes.html":{}},"body":{"modules/AppRoutingModule.html":{},"routes.html":{}}}],["routing.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["routing.module.ts",{"_index":158,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["row",{"_index":260,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["row.join",{"_index":282,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["rows",{"_index":489,"title":{},"body":{"injectables/SettingsService.html":{}}}],["run",{"_index":597,"title":{},"body":{"index.html":{}}}],["running",{"_index":618,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["scaffolding",{"_index":607,"title":{},"body":{"index.html":{}}}],["screen",{"_index":167,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["searched",{"_index":223,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{}}}],["select",{"_index":299,"title":{},"body":{"components/GridComponent.html":{}}}],["selected",{"_index":236,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["selecteddifficulty",{"_index":433,"title":{},"body":{"components/SettingsComponent.html":{}}}],["selecting",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["selector",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["selects",{"_index":205,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{}}}],["serve",{"_index":599,"title":{},"body":{"index.html":{}}}],["server",{"_index":596,"title":{},"body":{"index.html":{}}}],["set",{"_index":379,"title":{},"body":{"injectables/GridService.html":{},"components/TimerComponent.html":{}}}],["setmine",{"_index":325,"title":{},"body":{"injectables/GridService.html":{}}}],["setmine(square",{"_index":377,"title":{},"body":{"injectables/GridService.html":{}}}],["setnewgame(e",{"_index":245,"title":{},"body":{"components/GridComponent.html":{}}}],["setresettimer(e",{"_index":541,"title":{},"body":{"components/TimerComponent.html":{}}}],["settimeout",{"_index":550,"title":{},"body":{"components/TimerComponent.html":{}}}],["settings",{"_index":192,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{}}}],["settings'},{'name",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["settings.component.css",{"_index":430,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.component.html",{"_index":431,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.difficulties",{"_index":462,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.difficulty.label",{"_index":460,"title":{},"body":{"components/SettingsComponent.html":{}}}],["settings.numcols",{"_index":395,"title":{},"body":{"injectables/GridService.html":{}}}],["settings.numrows",{"_index":393,"title":{},"body":{"injectables/GridService.html":{}}}],["settings.service",{"_index":249,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["settings/settings.component",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["settingscomponent",{"_index":121,"title":{"components/SettingsComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["settingsservice",{"_index":193,"title":{"injectables/SettingsService.html":{}},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"coverage.html":{}}}],["single",{"_index":531,"title":{},"body":{"components/TimerComponent.html":{}}}],["size",{"_index":294,"title":{},"body":{"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["small",{"_index":295,"title":{},"body":{"components/GridComponent.html":{}}}],["solid",{"_index":288,"title":{},"body":{"components/GridComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"injectables/LoggerService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"index.html":{}}}],["specific",{"_index":335,"title":{},"body":{"injectables/GridService.html":{}}}],["specified",{"_index":220,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{}}}],["square",{"_index":224,"title":{"classes/Square.html":{}},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{},"coverage.html":{}}}],["square's",{"_index":226,"title":{},"body":{"components/GridComponent.html":{}}}],["square.col",{"_index":403,"title":{},"body":{"injectables/GridService.html":{}}}],["square.row",{"_index":405,"title":{},"body":{"injectables/GridService.html":{}}}],["square.row+1",{"_index":407,"title":{},"body":{"injectables/GridService.html":{}}}],["squareiszero",{"_index":326,"title":{},"body":{"injectables/GridService.html":{}}}],["squareiszero(square",{"_index":383,"title":{},"body":{"injectables/GridService.html":{}}}],["squares",{"_index":174,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["src/.../coord.ts",{"_index":644,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../difficulty.ts",{"_index":645,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/app",{"_index":157,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:21",{"_index":78,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:26",{"_index":73,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:31",{"_index":68,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:42",{"_index":61,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:53",{"_index":55,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:63",{"_index":34,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/grid.service.ts",{"_index":313,"title":{},"body":{"injectables/GridService.html":{},"coverage.html":{}}}],["src/app/grid.service.ts:107",{"_index":378,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:116",{"_index":359,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:130",{"_index":343,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:156",{"_index":339,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:183",{"_index":333,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:19",{"_index":386,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:197",{"_index":384,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:207",{"_index":352,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:23",{"_index":387,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:233",{"_index":346,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:27",{"_index":390,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:31",{"_index":328,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:49",{"_index":375,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:62",{"_index":362,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:77",{"_index":367,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid.service.ts:99",{"_index":373,"title":{},"body":{"injectables/GridService.html":{}}}],["src/app/grid/grid.component.ts",{"_index":164,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{},"coverage.html":{}}}],["src/app/grid/grid.component.ts:103",{"_index":241,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:108",{"_index":194,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:124",{"_index":227,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:14",{"_index":508,"title":{},"body":{"classes/Square.html":{}}}],["src/app/grid/grid.component.ts:146",{"_index":211,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:155",{"_index":213,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:164",{"_index":217,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:179",{"_index":232,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:19",{"_index":511,"title":{},"body":{"classes/Square.html":{}}}],["src/app/grid/grid.component.ts:197",{"_index":240,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:231",{"_index":200,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:24",{"_index":510,"title":{},"body":{"classes/Square.html":{}}}],["src/app/grid/grid.component.ts:241",{"_index":238,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:29",{"_index":509,"title":{},"body":{"classes/Square.html":{}}}],["src/app/grid/grid.component.ts:34",{"_index":507,"title":{},"body":{"classes/Square.html":{}}}],["src/app/grid/grid.component.ts:53",{"_index":513,"title":{},"body":{"classes/Square.html":{}}}],["src/app/grid/grid.component.ts:64",{"_index":512,"title":{},"body":{"classes/Square.html":{}}}],["src/app/grid/grid.component.ts:88",{"_index":242,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:93",{"_index":244,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/grid/grid.component.ts:98",{"_index":208,"title":{},"body":{"components/GridComponent.html":{}}}],["src/app/logger.service.ts",{"_index":425,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/app/settings.service.ts",{"_index":472,"title":{},"body":{"injectables/SettingsService.html":{},"coverage.html":{}}}],["src/app/settings.service.ts:18",{"_index":488,"title":{},"body":{"injectables/SettingsService.html":{}}}],["src/app/settings.service.ts:23",{"_index":485,"title":{},"body":{"injectables/SettingsService.html":{}}}],["src/app/settings.service.ts:28",{"_index":487,"title":{},"body":{"injectables/SettingsService.html":{}}}],["src/app/settings.service.ts:33",{"_index":483,"title":{},"body":{"injectables/SettingsService.html":{}}}],["src/app/settings.service.ts:38",{"_index":476,"title":{},"body":{"injectables/SettingsService.html":{}}}],["src/app/settings.service.ts:74",{"_index":479,"title":{},"body":{"injectables/SettingsService.html":{}}}],["src/app/settings/settings.component.ts",{"_index":429,"title":{},"body":{"components/SettingsComponent.html":{},"coverage.html":{}}}],["src/app/settings/settings.component.ts:21",{"_index":458,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:26",{"_index":457,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:31",{"_index":437,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:57",{"_index":444,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/settings/settings.component.ts:65",{"_index":452,"title":{},"body":{"components/SettingsComponent.html":{}}}],["src/app/timer/timer.component.ts",{"_index":514,"title":{},"body":{"components/TimerComponent.html":{},"coverage.html":{}}}],["src/app/timer/timer.component.ts:23",{"_index":539,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/timer/timer.component.ts:28",{"_index":520,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/timer/timer.component.ts:38",{"_index":536,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/timer/timer.component.ts:48",{"_index":527,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/timer/timer.component.ts:76",{"_index":524,"title":{},"body":{"components/TimerComponent.html":{}}}],["src/app/types/coord.ts",{"_index":646,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app/types/difficulty.ts",{"_index":648,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["start",{"_index":62,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["started",{"_index":74,"title":{"index.html":{}},"body":{"components/AppComponent.html":{}}}],["starting",{"_index":202,"title":{},"body":{"components/GridComponent.html":{}}}],["startnewgame",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["startnewgame(e",{"_index":60,"title":{},"body":{"components/AppComponent.html":{}}}],["starts",{"_index":537,"title":{},"body":{"components/TimerComponent.html":{}}}],["state",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["statements",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":347,"title":{},"body":{"injectables/GridService.html":{}}}],["stop",{"_index":36,"title":{},"body":{"components/AppComponent.html":{}}}],["stopped",{"_index":72,"title":{},"body":{"components/AppComponent.html":{}}}],["stops",{"_index":542,"title":{},"body":{"components/TimerComponent.html":{}}}],["store",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{}}}],["stored",{"_index":613,"title":{},"body":{"index.html":{}}}],["storing",{"_index":79,"title":{},"body":{"components/AppComponent.html":{}}}],["string",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["style",{"_index":287,"title":{},"body":{"components/GridComponent.html":{}}}],["style.height",{"_index":186,"title":{},"body":{"components/GridComponent.html":{}}}],["style.width",{"_index":187,"title":{},"body":{"components/GridComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["styleurls",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["support",{"_index":636,"title":{},"body":{"modules.html":{}}}],["surrounded",{"_index":360,"title":{},"body":{"injectables/GridService.html":{}}}],["surrounding",{"_index":344,"title":{},"body":{"injectables/GridService.html":{}}}],["surroundingsquare",{"_index":419,"title":{},"body":{"injectables/GridService.html":{}}}],["surroundingsquares",{"_index":408,"title":{},"body":{"injectables/GridService.html":{}}}],["surroundingsquares.push({row",{"_index":404,"title":{},"body":{"injectables/GridService.html":{}}}],["svg",{"_index":637,"title":{},"body":{"modules.html":{}}}],["table",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["templateurl",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["test",{"_index":621,"title":{},"body":{"index.html":{}}}],["tests",{"_index":620,"title":{},"body":{"index.html":{}}}],["this.coord",{"_index":265,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["this.coordincoordarray(surroundingsquare",{"_index":420,"title":{},"body":{"injectables/GridService.html":{}}}],["this.difficulties",{"_index":491,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.difficulties[0",{"_index":498,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.difficulty",{"_index":497,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.difficulty.numcols",{"_index":502,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.difficulty.nummines",{"_index":504,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.difficulty.numrows",{"_index":500,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.difficultylabels",{"_index":461,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.difficultylabels.push(difficulty.label",{"_index":463,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.flagged",{"_index":268,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["this.gamestopped",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"components/TimerComponent.html":{}}}],["this.getsurroundingsquares(square",{"_index":418,"title":{},"body":{"injectables/GridService.html":{}}}],["this.getzerogroup(surroundingsquare",{"_index":422,"title":{},"body":{"injectables/GridService.html":{}}}],["this.grid",{"_index":397,"title":{},"body":{"injectables/GridService.html":{}}}],["this.grid.grid",{"_index":281,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["this.grid[row][col",{"_index":424,"title":{},"body":{"injectables/GridService.html":{}}}],["this.grid[square.row][square.col",{"_index":416,"title":{},"body":{"injectables/GridService.html":{}}}],["this.gridstring",{"_index":279,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["this.height",{"_index":392,"title":{},"body":{"injectables/GridService.html":{}}}],["this.hidden",{"_index":267,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["this.html",{"_index":269,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["this.incrementtimer",{"_index":551,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.initializegridwithzeros",{"_index":398,"title":{},"body":{"injectables/GridService.html":{}}}],["this.insertmines(settings.nummines",{"_index":399,"title":{},"body":{"injectables/GridService.html":{}}}],["this.insertmines(this.settings.nummines",{"_index":402,"title":{},"body":{"injectables/GridService.html":{}}}],["this.logger.log(this.gamestopped",{"_index":553,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.mines",{"_index":396,"title":{},"body":{"injectables/GridService.html":{}}}],["this.newgame.emit(true",{"_index":466,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.newgametriggered",{"_index":97,"title":{},"body":{"components/AppComponent.html":{}}}],["this.numcols",{"_index":501,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.nummines",{"_index":503,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.numrows",{"_index":499,"title":{},"body":{"injectables/SettingsService.html":{}}}],["this.selecteddifficulty",{"_index":459,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.settings.changedifficulty(this.selecteddifficulty",{"_index":465,"title":{},"body":{"components/SettingsComponent.html":{}}}],["this.settings.numcols",{"_index":401,"title":{},"body":{"injectables/GridService.html":{}}}],["this.settings.numrows",{"_index":400,"title":{},"body":{"injectables/GridService.html":{}}}],["this.squareiszero(surroundingsquare",{"_index":421,"title":{},"body":{"injectables/GridService.html":{}}}],["this.squares",{"_index":280,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["this.time",{"_index":559,"title":{},"body":{"components/TimerComponent.html":{}}}],["this.val",{"_index":266,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["this.val.tostring",{"_index":271,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["this.width",{"_index":394,"title":{},"body":{"injectables/GridService.html":{}}}],["tile",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["tile's",{"_index":374,"title":{},"body":{"injectables/GridService.html":{}}}],["tiles",{"_index":341,"title":{},"body":{"injectables/GridService.html":{}}}],["time",{"_index":517,"title":{},"body":{"components/TimerComponent.html":{}}}],["timeasnum",{"_index":554,"title":{},"body":{"components/TimerComponent.html":{}}}],["timeasnum.tostring",{"_index":557,"title":{},"body":{"components/TimerComponent.html":{}}}],["timeasstring",{"_index":556,"title":{},"body":{"components/TimerComponent.html":{}}}],["timeasstring.length",{"_index":558,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["timer.component.css",{"_index":515,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer.component.html",{"_index":516,"title":{},"body":{"components/TimerComponent.html":{}}}],["timer/timer.component",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["timercomponent",{"_index":123,"title":{"components/TimerComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{},"coverage.html":{},"overview.html":{}}}],["title",{"_index":26,"title":{},"body":{"components/AppComponent.html":{}}}],["todo",{"_index":545,"title":{},"body":{"components/TimerComponent.html":{}}}],["toggle",{"_index":272,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["toggleflag",{"_index":278,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["toggling",{"_index":442,"title":{},"body":{"components/SettingsComponent.html":{}}}],["top",{"_index":406,"title":{},"body":{"injectables/GridService.html":{},"components/SettingsComponent.html":{}}}],["track",{"_index":389,"title":{},"body":{"injectables/GridService.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["trigger",{"_index":59,"title":{},"body":{"components/AppComponent.html":{}}}],["triggered",{"_index":50,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"classes/Square.html":{}}}],["triple",{"_index":533,"title":{},"body":{"components/TimerComponent.html":{}}}],["true",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["tslib",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":642,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/coord",{"_index":250,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{},"classes/Square.html":{}}}],["types/difficulty",{"_index":490,"title":{},"body":{"injectables/SettingsService.html":{}}}],["ultimate",{"_index":77,"title":{},"body":{"components/AppComponent.html":{}}}],["uncover",{"_index":353,"title":{},"body":{"injectables/GridService.html":{}}}],["uncovered",{"_index":308,"title":{},"body":{"components/GridComponent.html":{}}}],["uncovering",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["uncovers",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{}}}],["undefined",{"_index":225,"title":{},"body":{"components/GridComponent.html":{}}}],["unflag",{"_index":277,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["unhidden",{"_index":301,"title":{},"body":{"components/GridComponent.html":{}}}],["unhide",{"_index":179,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["unhide(square",{"_index":239,"title":{},"body":{"components/GridComponent.html":{}}}],["unit",{"_index":619,"title":{},"body":{"index.html":{}}}],["unnumbered",{"_index":349,"title":{},"body":{"injectables/GridService.html":{}}}],["unpauses",{"_index":549,"title":{},"body":{"components/TimerComponent.html":{}}}],["update",{"_index":89,"title":{},"body":{"components/AppComponent.html":{}}}],["updates",{"_index":529,"title":{},"body":{"components/TimerComponent.html":{}}}],["url(../../assets/mine.png",{"_index":310,"title":{},"body":{"components/GridComponent.html":{}}}],["use",{"_index":609,"title":{},"body":{"index.html":{}}}],["user",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["uses",{"_index":521,"title":{},"body":{"components/TimerComponent.html":{}}}],["val",{"_index":257,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["value",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["var",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"components/SettingsComponent.html":{},"components/TimerComponent.html":{}}}],["variable",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["various",{"_index":484,"title":{},"body":{"injectables/SettingsService.html":{}}}],["version",{"_index":594,"title":{},"body":{"index.html":{}}}],["via",{"_index":623,"title":{},"body":{"index.html":{}}}],["view",{"_index":254,"title":{},"body":{"components/GridComponent.html":{},"classes/Square.html":{}}}],["void",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"components/GridComponent.html":{},"injectables/GridService.html":{},"components/SettingsComponent.html":{},"injectables/SettingsService.html":{},"classes/Square.html":{},"components/TimerComponent.html":{}}}],["webpage",{"_index":81,"title":{},"body":{"components/AppComponent.html":{}}}],["weight",{"_index":296,"title":{},"body":{"components/GridComponent.html":{}}}],["well",{"_index":329,"title":{},"body":{"injectables/GridService.html":{},"components/SettingsComponent.html":{}}}],["whether",{"_index":234,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{}}}],["width",{"_index":214,"title":{},"body":{"components/GridComponent.html":{},"injectables/GridService.html":{}}}],["wins",{"_index":544,"title":{},"body":{"components/TimerComponent.html":{}}}],["wrap",{"_index":284,"title":{},"body":{"components/GridComponent.html":{}}}],["yes",{"_index":355,"title":{},"body":{"injectables/GridService.html":{}}}],["zero",{"_index":526,"title":{},"body":{"components/TimerComponent.html":{}}}],["zerogroup",{"_index":351,"title":{},"body":{"injectables/GridService.html":{}}}],["zerogroup.push(square",{"_index":417,"title":{},"body":{"injectables/GridService.html":{}}}],["zerogroup.push(surroundingsquare",{"_index":423,"title":{},"body":{"injectables/GridService.html":{}}}],["zeros",{"_index":363,"title":{},"body":{"injectables/GridService.html":{}}}],["zone.js",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n    \n        Description\n    \n    \n        Component for the base application.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                styleUrls\n                ./app.component.css\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gameStopped\n                            \n                            \n                                newGameTriggered\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onGameOverTriggered\n                            \n                            \n                                onNewGameRender\n                            \n                            \n                                startNewGame\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onGameOverTriggered\n                        \n                        \n                    \n                \n            \n            \n                \nonGameOverTriggered(e: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:63\n                \n            \n\n\n            \n                \n                    A function to stop the game if the user uncovers all mines or discovers a mine.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event that triggered the game to stop (uncovering all mines or a mine)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNewGameRender\n                        \n                        \n                    \n                \n            \n            \n                \nonNewGameRender(e: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:53\n                \n            \n\n\n            \n                \n                    A function to render a new game grid.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event to trigger a new game.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startNewGame\n                        \n                        \n                    \n                \n            \n            \n                \nstartNewGame(e: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/app/app.component.ts:42\n                \n            \n\n\n            \n                \n                    A function to start new game when the event is triggered by the user selecting a tile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event of the user selecting a tile.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gameStopped\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:31\n                            \n                        \n\n                \n                    \n                        A state variable to store if a game is stopped or not. A game is not stopped by default.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newGameTriggered\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:26\n                            \n                        \n\n                \n                    \n                        A state variable to store the state of the game. A game is not started by default.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Minesweeper Ultimate'\n                        \n                    \n                        \n                            \n                                    Defined in src/app/app.component.ts:21\n                            \n                        \n\n                \n                    \n                        A variable storing the title of the application's webpage.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { LoggerService } from './logger.service';\n\n/**\n * Component for the base application.\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\n/**\n * AppComponent class to render a new game or determine if a game is over and to update the\n * application accordingly.\n */\nexport class AppComponent {\n  /**\n   * A variable storing the title of the application's webpage.\n   */\n  title = 'Minesweeper Ultimate';\n\n  /**\n   * A state variable to store the state of the game. A game is not started by default.\n   */\n  newGameTriggered: boolean = false;\n\n  /**\n   * A state variable to store if a game is stopped or not. A game is not stopped by default.\n   */\n  gameStopped = false;\n\n  /**\n   * @ignore\n   */\n  constructor(private logger: LoggerService) {}\n\n  /**\n   * A function to start new game when the event is triggered by the user selecting a tile.\n   * @param e The event of the user selecting a tile.\n   */\n  startNewGame(e: boolean) {\n    if (e === true) {\n      this.newGameTriggered = true;\n      this.gameStopped = false;\n    }\n  }\n\n  /**\n   * A function to render a new game grid.\n   * @param e The event to trigger a new game.\n   */\n  onNewGameRender(e: boolean) {\n    if (e === true) {\n      this.newGameTriggered = false;\n    }\n  }\n\n  /**\n   * A function to stop the game if the user uncovers all mines or discovers a mine.\n   * @param e The event that triggered the game to stop (uncovering all mines or a mine)\n   */\n  onGameOverTriggered(e: boolean) {\n    this.gameStopped = true;\n  }\n}\n\n    \n\n    \n        \n\n\n    \n\n    \n                \n                    ./app.component.css\n                \n                :host {\n    display: flex;\n    height: 100%;\n    align-items: center;\n    justify-content: center;\n    background-color: #161616;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGridComponent\n\nGridComponent\n\nAppModule -->\n\nGridComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            GridComponent\n                        \n                        \n                            SettingsComponent\n                        \n                        \n                            TimerComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GridComponent } from './grid/grid.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { TimerComponent } from './timer/timer.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GridComponent,\n    SettingsComponent,\n    TimerComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GridComponent.html":{"url":"components/GridComponent.html","title":"component - GridComponent","body":"\n                   \n\n\n\n\n\n  Components\n  GridComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/grid/grid.component.ts\n\n\n    \n        Description\n    \n    \n        The Component for displaying the game grid module logic to the screen.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-grid\n            \n\n            \n                styleUrls\n                ./grid.component.css\n            \n\n\n\n            \n                templateUrl\n                ./grid.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                gameOver\n                            \n                            \n                                gridString\n                            \n                            \n                                squares\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getSquareWithCoord\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onMouseDown\n                            \n                            \n                                startNewGame\n                            \n                            \n                                unhide\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                newGame\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                gameOverTriggered\n                            \n                            \n                                newGameRenderFinished\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                style.height\n                            \n                            \n                                style.width\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    newGame\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(grid: GridService, settings: SettingsService, logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/grid/grid.component.ts:108\n                            \n                        \n\n                \n                    \n                            Initializes the grid string to an empty string and the squares of the game grid to an empty array.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        grid\n                                                  \n                                                        \n                                                                        GridService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The game grid module details.\n\n                                                        \n                                                \n                                                \n                                                        settings\n                                                  \n                                                        \n                                                                        SettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The difficulty module details.\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                LoggerService details.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        newGame\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:231\n                            \n                        \n                \n                    \n                        An input for starting a new game based on when the user first selects a tile on the game grid.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        gameOverTriggered\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:108\n                            \n                        \n                \n                    \n                        A state variable to determine if the game over has been triggered or ont yet.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        newGameRenderFinished\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:98\n                            \n                        \n                \n                    \n                        A state variable to hold if a new game grid has been generated.\n\n                    \n                \n            \n        \n\n    \n    HostBindings        \n            \n                \n                    \n                        \n                        \n                            \n                            style.height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:146\n                            \n                        \n\n                \n                    \n                        A function to get the height of the game grid in pixels.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            style.width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:155\n                            \n                        \n\n                \n                    \n                        A function to get the width of the game grid in pixels.\n\n                    \n                \n\n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getSquareWithCoord\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSquareWithCoord(coord: Coord)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid/grid.component.ts:164\n                \n            \n\n\n            \n                \n                    A function to get the designated tile based on the coordinates on the game grid.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    coord\n                                    \n                                                Coord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The specified coordinate that is being searched for.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Square | undefined\n\n                    \n                    \n                        The square's coordinate on the game grid.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid/grid.component.ts:124\n                \n            \n\n\n            \n                \n                    A function to initialize all of the data in the game grid for displaying to the screen.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMouseDown\n                        \n                        \n                    \n                \n            \n            \n                \nonMouseDown(e: MouseEvent, square: Square)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid/grid.component.ts:179\n                \n            \n\n\n            \n                \n                    A function to deal with the user selecting a tile, whether it be flagging or uncovering a tile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event of the user selecting a tile.\n\n                                    \n                                \n                                \n                                    square\n                                    \n                                                Square\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The specified tile that the user has selected.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        Nothing\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            startNewGame\n                        \n                        \n                    \n                \n            \n            \n                \nstartNewGame()\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid/grid.component.ts:241\n                \n            \n\n\n            \n                \n                    A function to start a new game and initialize the game grid for displaying to the screen.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unhide\n                        \n                        \n                    \n                \n            \n            \n                \nunhide(square: Square)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid/grid.component.ts:197\n                \n            \n\n\n            \n                \n                    A function to deal with when the user uncovers a tile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    square\n                                    \n                                                Square\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The specified tile that the user has selected.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        Nothing, game is over\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gameOver\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:103\n                            \n                        \n\n                \n                    \n                        A state variable to determine if the game is over or not.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gridString\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:88\n                            \n                        \n\n                \n                    \n                        A state variable to hold the current state of the game grid as a string.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            squares\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Square[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:93\n                            \n                        \n\n                \n                    \n                        A state variable to store the game grid.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        newGame\n                    \n                \n\n\n                \n                    \n                        setnewGame(e: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/app/grid/grid.component.ts:231\n                                \n                            \n                    \n                        \n                                An input for starting a new game based on when the user first selects a tile on the game grid.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            e\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, HostBinding, Input, OnInit, Output } from '@angular/core';\nimport { GridService } from '../grid.service';\nimport { SettingsService } from '../settings.service';\nimport { Coord } from '../types/coord';\nimport { LoggerService } from '../logger.service';\n\n/**\n * The square class that contains the display properties for the game grid module.\n */\nclass Square {\n  /**\n   * A state variable containing the designated coordinate to modify or view.\n   */\n  coord: Coord;\n\n  /**\n   * A state variable containing the number on the tile (-1 if it is a mine).\n   */\n  val: number;\n\n  /**\n   * A state variable to determine if a tile has been selected or not.\n   */\n  hidden: boolean;\n\n  /**\n   * A state variable to determine if a tile is flagged or not.\n   */\n  flagged: boolean;\n\n  /**\n   * @ignore\n   */\n  html: string;\n\n  /**\n   * Initializes the tile that has been selected by the user.\n   * @param row The row that the selected tile is located in.\n   * @param col The column that the selected tile is located in.\n   * @param val The value that is on the selected tile (-1 if it is a mine).\n   */\n  constructor(row: number, col: number, val: number) {\n    this.coord = {row: row, col: col};\n    this.val = val;\n    this.hidden = true;\n    this.flagged = false;\n    this.html = \"\";\n  }\n\n  /**\n   * A function to unhide the tile that the user has selected.\n   */\n  unhide() {\n    this.hidden = false;\n    this.flagged = false;\n    if (this.val !== 0) {\n      this.html = this.val.toString();\n    }\n  }\n\n  /**\n   * A function to toggle the flag when the player right clicks a tile to either flag or unflag the file.\n   */\n  toggleFlag() {\n    if (this.hidden) {\n      this.flagged = !this.flagged;\n    }\n  }\n}\n\n/**\n * The Component for displaying the game grid module logic to the screen.\n */\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.css']\n})\n\n\n/**\n * The game grid module class for displaying the outputs to the screen.\n */\nexport class GridComponent implements OnInit {\n  /**\n   * A state variable to hold the current state of the game grid as a string.\n   */\n  gridString: string;\n\n  /**\n   * A state variable to store the game grid.\n   */\n  squares: Square[];\n\n  /**\n   * A state variable to hold if a new game grid has been generated.\n   */\n  @Output() newGameRenderFinished = new EventEmitter();\n\n  /**\n   * A state variable to determine if the game is over or not.\n   */\n  gameOver = false;\n\n  /**\n   * A state variable to determine if the game over has been triggered or ont yet.\n   */\n  @Output() gameOverTriggered = new EventEmitter();\n\n  /**\n   * Initializes the grid string to an empty string and the squares of the game grid to an empty array.\n   * @param grid The game grid module details.\n   * @param settings The difficulty module details.\n   * @param logger LoggerService details.\n   */\n  constructor(private grid: GridService, private settings: SettingsService, private logger: LoggerService) {\n    this.gridString = \"\";\n    this.squares = [];\n  }\n\n  /**\n   * A function to initialize all of the data in the game grid for displaying to the screen.\n   */\n  ngOnInit(): void {\n    this.gridString = \"[\";\n    for (let row of this.grid.grid) {\n      this.gridString += \"[\";\n      this.gridString += row.join(\",\");\n      this.gridString += \"]\"\n    }\n    this.gridString += \"]\";\n\n    for (let row = 0; row \n    \n\n    \n        \n    \n\n    \n                \n                    ./grid.component.css\n                \n                :host {\n    background-color: red;\n    display: flex;\n    flex-wrap: wrap;\n    border-width: 2px;\n    border-style: solid;\n    border-color: #808080 #f5f5f5 #f5f5f5 #808080;\n}\n\n.square {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 16px;\n    width: 16px;\n    background-color: #c0c0c0;\n    border-width: 2px;\n    border-style: solid;\n    font-size: small;\n    font-weight: bold;\n    cursor: default;\n    user-select: none;\n}\n\n.hidden {\n    border-color: #f5f5f5 #808080 #808080 #f5f5f5;\n}\n\n.unhidden {\n    border-color: #808080;\n}\n\n.flagged {\n    background-color: rgb(250, 91, 91);\n    border-color: rgb(255, 164, 164) #8f3232 #8f3232 rgb(255, 164, 164);\n}\n\n.bomb-uncovered {\n    background-color: rgb(250, 91, 91);\n    border-color: #8f3232 rgb(250, 91, 91) rgb(250, 91, 91) #8f3232;\n    background-image: url(../../assets/mine.png);\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GridComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GridService.html":{"url":"injectables/GridService.html","title":"injectable - GridService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GridService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/grid.service.ts\n        \n\n            \n                Description\n            \n            \n                Grid Injectible\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                grid\n                            \n                            \n                                height\n                            \n                            \n                                mines\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                coordInCoordArray\n                            \n                            \n                                    Private\n                                getAdjacentSquares\n                            \n                            \n                                    Private\n                                getSurroundingSquares\n                            \n                            \n                                getValue\n                            \n                            \n                                getZeroGroup\n                            \n                            \n                                    Private\n                                incrementSurroundingSquares\n                            \n                            \n                                    Private\n                                initializeGridWithZeros\n                            \n                            \n                                    Private\n                                insertMines\n                            \n                            \n                                    Private\n                                isMine\n                            \n                            \n                                resetGrid\n                            \n                            \n                                    Private\n                                setMine\n                            \n                            \n                                    Private\n                                squareIsZero\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(settings: SettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/grid.service.ts:31\n                            \n                        \n\n                \n                    \n                            Initializes the game grid as well as its number of mines, height, and width.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        settings\n                                                  \n                                                        \n                                                                        SettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The settings from the difficulty module which include the difficulty the player selected.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            coordInCoordArray\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    coordInCoordArray(coord: Coord, coordArray: Coord[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:183\n                \n            \n\n\n            \n                \n                    A function to return a specific coordinate in the entire coordinate array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    coord\n                                    \n                                                Coord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The specified coordinate that is being searched for.\n\n                                    \n                                \n                                \n                                    coordArray\n                                    \n                                                Coord[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The coordinate array that is being searched for the specific coordinate.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the coordinate is in the coordinate array, false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getAdjacentSquares\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdjacentSquares(square: Coord)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:156\n                \n            \n\n\n            \n                \n                    A function to get the adjacent tiles to a designated tile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    square\n                                    \n                                                Coord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The designated tile to get the adjacent tiles of.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Coord[]\n\n                    \n                    \n                        A Coord array of the adjacent tiles to a specified tile.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            getSurroundingSquares\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSurroundingSquares(square: Coord)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:130\n                \n            \n\n\n            \n                \n                    A function to get the surrounding tiles' data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    square\n                                    \n                                                Coord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The designated coordinates to get the surrounding tiles of.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        The adjacent tiles of the specified tile.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getValue\n                        \n                        \n                    \n                \n            \n            \n                \ngetValue(row: number, col: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:233\n                \n            \n\n\n            \n                \n                    A function to return the specified tile based on the row or column specified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    row\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The row the tile is located in.\n\n                                    \n                                \n                                \n                                    col\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The column the tile is located in.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The status of the specified tile (whether it contains a mine, is numbered, or unnumbered)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getZeroGroup\n                        \n                        \n                    \n                \n            \n            \n                \ngetZeroGroup(square: Coord, zeroGroup?: Coord[])\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:207\n                \n            \n\n\n            \n                \n                    A function to uncover any adjacent tiles that do not have any adjacent mines (otherwise contain no number).\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    square\n                                    \n                                                Coord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The tile that has been selected that has no adjacent mines surrounding it\n\n                                    \n                                \n                                \n                                    zeroGroup\n                                    \n                                                Coord[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The group of adjacent tiles that do not have any adjacent mines.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Coord[]\n\n                    \n                    \n                        The full group of adjacent tiles that do not have any adjacent mines.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            incrementSurroundingSquares\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    incrementSurroundingSquares(square: Coord)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:116\n                \n            \n\n\n            \n                \n                    A function to modify tiles that are surrounded by a mine with the appropriate number of adjacent mines.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    square\n                                    \n                                                Coord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The tiles that are surrounding a mine tile.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            initializeGridWithZeros\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    initializeGridWithZeros()\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:62\n                \n            \n\n\n            \n                \n                    A function that initializes the game grid with zeros that will be modified with the insertion of \nmines and their adjacent numbered tiles.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            insertMines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertMines(numMines: number)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:77\n                \n            \n\n\n            \n                \n                    A function to populate the game grid with mines depending on the difficulty selected by the player.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    numMines\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The number of mines to place on the game grid based on the difficulty.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isMine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isMine(square: Coord)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:99\n                \n            \n\n\n            \n                \n                    A function to determine if the selected tile is a mine.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    square\n                                    \n                                                Coord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The selected tile's coordinates on the game grid.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the selected tile is a mine, false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            resetGrid\n                        \n                        \n                    \n                \n            \n            \n                \nresetGrid()\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:49\n                \n            \n\n\n            \n                \n                    A function that resets to an empty game grid with the designated height and width from the difficulty.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            setMine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMine(square: Coord)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:107\n                \n            \n\n\n            \n                \n                    A function to set a random tile as a mine when the game board is generated.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    square\n                                    \n                                                Coord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The designated tile coordinates where the mine will be placed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            squareIsZero\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    squareIsZero(square: Coord)\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid.service.ts:197\n                \n            \n\n\n            \n                \n                    A function to determine if the selected tile has any adjacent mines or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    square\n                                    \n                                                Coord\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The designated tile's coordinates to check for no adjacent mines.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if there are no adjacent mines, false otherwise.\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            grid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[][]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid.service.ts:19\n                            \n                        \n\n                \n                    \n                        A state variable for the game grid.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            height\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid.service.ts:23\n                            \n                        \n\n                \n                    \n                        A state variable to keep track of the current height of the game grid.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mines\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Coord[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid.service.ts:31\n                            \n                        \n\n                \n                    \n                        A state variable to track where the mines on the current game grid are.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            width\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid.service.ts:27\n                            \n                        \n\n                \n                    \n                        A state variable to keep track of the current width of the game grid.\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { SettingsService } from './settings.service';\nimport { Coord } from './types/coord';\n\n/**\n * Grid Injectible\n */\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * The class for the game grid module.\n */\nexport class GridService {\n  /**\n   * A state variable for the game grid.\n   */\n  grid: number[][];\n  /**\n   * A state variable to keep track of the current height of the game grid.\n   */\n  height: number;\n  /**\n   * A state variable to keep track of the current width of the game grid.\n   */\n  width: number;\n  /**\n   * A state variable to track where the mines on the current game grid are.\n   */\n  mines: Coord[];\n\n  /**\n   * Initializes the game grid as well as its number of mines, height, and width.\n   * @param settings The settings from the difficulty module which include the difficulty the player selected.\n   */\n  constructor(private settings: SettingsService) {\n    this.height = settings.numRows;\n    this.width = settings.numCols;\n    this.mines = [];\n    this.grid = [];\n    this.initializeGridWithZeros();\n    this.insertMines(settings.numMines);\n  }\n\n  /**\n   * A function that resets to an empty game grid with the designated height and width from the difficulty.\n   */\n  resetGrid() {\n    this.height = this.settings.numRows;\n    this.width = this.settings.numCols;\n    this.mines = [];\n    this.grid = [];\n    this.initializeGridWithZeros();\n    this.insertMines(this.settings.numMines);\n  }\n\n  /**\n   * A function that initializes the game grid with zeros that will be modified with the insertion of \n   * mines and their adjacent numbered tiles.\n   */\n  private initializeGridWithZeros() {\n    this.grid = [];\n    for (let i = 0; i  0 && square.col > 0) {\n      surroundingSquares.push({row: square.row-1, col: square.col-1});\n    }\n    // Top-right\n    if (square.row > 0 && square.col  0) {\n      surroundingSquares.push({row: square.row+1, col: square.col-1});\n    }\n    return surroundingSquares;\n  }\n\n  /**\n   * A function to get the adjacent tiles to a designated tile.\n   * @param square The designated tile to get the adjacent tiles of.\n   * @returns A Coord array of the adjacent tiles to a specified tile.\n   */\n  private getAdjacentSquares(square: Coord): Coord[] {\n    let adjacentSquares: Coord[] = [];\n    // Top\n    if (square.row > 0) {\n      adjacentSquares.push({row: square.row-1, col: square.col});\n    }\n    // Right\n    if (square.col  0) {\n      adjacentSquares.push({row: square.row, col: square.col-1});\n    }\n    return adjacentSquares;\n  }\n\n  /**\n   * A function to return a specific coordinate in the entire coordinate array.\n   * @param coord The specified coordinate that is being searched for.\n   * @param coordArray The coordinate array that is being searched for the specific coordinate.\n   * @returns True if the coordinate is in the coordinate array, false otherwise.\n   */\n  private coordInCoordArray(coord: Coord, coordArray: Coord[]): boolean {\n    for (let arrayElem of coordArray) {\n      if (arrayElem.row === coord.row && arrayElem.col === coord.col) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * A function to determine if the selected tile has any adjacent mines or not.\n   * @param square The designated tile's coordinates to check for no adjacent mines.\n   * @returns True if there are no adjacent mines, false otherwise.\n   */\n  private squareIsZero(square: Coord): boolean {\n    return this.grid[square.row][square.col] === 0;\n  }\n\n  /**\n   * A function to uncover any adjacent tiles that do not have any adjacent mines (otherwise contain no number).\n   * @param square The tile that has been selected that has no adjacent mines surrounding it\n   * @param zeroGroup The group of adjacent tiles that do not have any adjacent mines.\n   * @returns The full group of adjacent tiles that do not have any adjacent mines.\n   */\n  getZeroGroup(square: Coord, zeroGroup?: Coord[]): Coord[] {\n    zeroGroup = zeroGroup || [];\n    if (this.grid[square.row][square.col] !== 0) {\n      return zeroGroup;\n    }\n    zeroGroup.push(square);\n    let surroundingSquares: Coord[] = this.getSurroundingSquares(square);\n    for (let surroundingSquare of surroundingSquares) {\n      if (!this.coordInCoordArray(surroundingSquare, zeroGroup)) {\n        if (this.squareIsZero(surroundingSquare)) {\n          zeroGroup = this.getZeroGroup(surroundingSquare, zeroGroup);\n        }\n        else {\n          zeroGroup.push(surroundingSquare);\n        }\n      }\n    }\n    return zeroGroup;\n  }\n\n  /**\n   * A function to return the specified tile based on the row or column specified.\n   * @param row The row the tile is located in.\n   * @param col The column the tile is located in.\n   * @returns The status of the specified tile (whether it contains a mine, is numbered, or unnumbered)\n   */\n  getValue(row: number, col: number) {\n    return this.grid[row][col];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/logger.service.ts\n        \n\n            \n                Description\n            \n            \n                Logger Injectible\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Logger Injectible\n */\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * LoggerService class\n */\nexport class LoggerService {\n\n  /**\n   * @ignore\n   */\n  constructor() { }\n\n  /**\n   * @ignore\n   */\n  log (msg: any) {\n    console.log(msg);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SettingsComponent.html":{"url":"components/SettingsComponent.html","title":"component - SettingsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  SettingsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/settings/settings.component.ts\n\n\n    \n        Description\n    \n    \n        The Component for the difficulty module.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-settings\n            \n\n            \n                styleUrls\n                ./settings.component.css\n            \n\n\n\n            \n                templateUrl\n                ./settings.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                difficultyLabels\n                            \n                            \n                                selectedDifficulty\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onChange\n                            \n                            \n                                onSubmit\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                newGame\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService, settings: SettingsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/settings/settings.component.ts:31\n                            \n                        \n\n                \n                    \n                            Initializes the selected difficulty to the one the player selected.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                For getting user input.\n\n                                                        \n                                                \n                                                \n                                                        settings\n                                                  \n                                                        \n                                                                        SettingsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The settings that the user can choose from. The settings correspond\nto the number of mines on the board as well as the size of the board.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        newGame\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:31\n                            \n                        \n                \n                    \n                        A state variable for toggling a new game state.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onChange\n                        \n                        \n                    \n                \n            \n            \n                \nonChange(e: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/settings/settings.component.ts:57\n                \n            \n\n\n            \n                \n                    A function to display the specified difficulties of Beginner, Intermediate, Expert.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event of the buttons being displayed.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onSubmit\n                        \n                        \n                    \n                \n            \n            \n                \nonSubmit(e: any)\n                \n            \n\n\n            \n                \n                    Defined in src/app/settings/settings.component.ts:65\n                \n            \n\n\n            \n                \n                    A function for when the player presses a difficulty button to start the game and change the difficulty.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The event of the player pressing the button.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            difficultyLabels\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:26\n                            \n                        \n\n                \n                    \n                        The variable to store the selected difficulty as a string.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectedDifficulty\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings/settings.component.ts:21\n                            \n                        \n\n                \n                    \n                        The state variable for the difficulty that the player selects.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n    \n        import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { SettingsService } from '../settings.service';\nimport { LoggerService } from '../logger.service';\n\n/**\n * The Component for the difficulty module.\n */\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css']\n})\n\n/**\n * The class for displaying the difficulty module to the screen.\n */\nexport class SettingsComponent implements OnInit {\n  /**\n   * The state variable for the difficulty that the player selects.\n   */\n  selectedDifficulty: string;\n\n  /**\n   * The variable to store the selected difficulty as a string.\n   */\n  difficultyLabels: string[];\n\n  /**\n   * A state variable for toggling a new game state.\n   */\n  @Output() newGame = new EventEmitter();\n\n  /**\n   * Initializes the selected difficulty to the one the player selected.\n   * @param logger For getting user input.\n   * @param settings The settings that the user can choose from. The settings correspond\n   * to the number of mines on the board as well as the size of the board.\n   */\n  constructor(private logger: LoggerService, private settings: SettingsService) {\n    this.selectedDifficulty = settings.difficulty.label;\n    this.difficultyLabels = [];\n    for (let difficulty of settings.difficulties) {\n      this.difficultyLabels.push(difficulty.label);\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * A function to display the specified difficulties of Beginner, Intermediate, Expert.\n   * @param e The event of the buttons being displayed.\n   */\n  onChange(e: any) {\n    this.selectedDifficulty = e.target.value;\n  }\n\n  /**\n   * A function for when the player presses a difficulty button to start the game and change the difficulty.\n   * @param e The event of the player pressing the button.\n   */\n  onSubmit(e: any) {\n    this.settings.changeDifficulty(this.selectedDifficulty);\n    this.newGame.emit(true);\n  }\n\n}\n\n    \n\n    \n        \n    {{difficultyLabel}}\n\n\nNew Game\n    \n\n    \n                \n                    ./settings.component.css\n                \n                button {\n    display: block;\n    margin-top: 20px;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{difficultyLabel}}New Game'\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'SettingsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SettingsService.html":{"url":"injectables/SettingsService.html","title":"injectable - SettingsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SettingsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/settings.service.ts\n        \n\n            \n                Description\n            \n            \n                Settings Injectible\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                difficulties\n                            \n                            \n                                difficulty\n                            \n                            \n                                numCols\n                            \n                            \n                                numMines\n                            \n                            \n                                numRows\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeDifficulty\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/settings.service.ts:38\n                            \n                        \n\n                \n                    \n                            Initializes the difficulties array to hold the difficulties that are available in the game.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changeDifficulty\n                        \n                        \n                    \n                \n            \n            \n                \nchangeDifficulty(label: string)\n                \n            \n\n\n            \n                \n                    Defined in src/app/settings.service.ts:74\n                \n            \n\n\n            \n                \n                    A function to change the difficulty of the game based on which one the player chooses.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The difficulty that is chosen by the player.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            difficulties\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Difficulty[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings.service.ts:33\n                            \n                        \n\n                \n                    \n                        A variable containing the various difficulties for the game.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            difficulty\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Difficulty\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings.service.ts:38\n                            \n                        \n\n                \n                    \n                        A state variable for the difficulty chosen by the player.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numCols\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings.service.ts:23\n                            \n                        \n\n                \n                    \n                        A state variable for the number of columns in the game grid.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numMines\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings.service.ts:28\n                            \n                        \n\n                \n                    \n                        A state variable for the number of mines in the game grid.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numRows\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/settings.service.ts:18\n                            \n                        \n\n                \n                    \n                        A state variable for the number of rows in the game grid.\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Difficulty } from './types/difficulty';\n\n/**\n * Settings Injectible\n */\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * The class for the difficulty module and its logic.\n */\nexport class SettingsService {\n  /**\n   * A state variable for the number of rows in the game grid.\n   */\n  numRows: number;\n\n  /**\n   * A state variable for the number of columns in the game grid.\n   */\n  numCols: number;\n\n  /**\n   * A state variable for the number of mines in the game grid.\n   */\n  numMines: number;\n\n  /**\n   * A variable containing the various difficulties for the game.\n   */\n  difficulties: Difficulty[];\n\n  /**\n   * A state variable for the difficulty chosen by the player.\n   */\n  difficulty: Difficulty;\n\n  /**\n   * Initializes the difficulties array to hold the difficulties that are available in the game.\n   */\n  constructor() {\n    this.difficulties = [\n      {\n        label: \"Beginner\",\n        numRows: 10,\n        numCols: 10,\n        numMines: 10\n      },\n      {\n        label: \"Intermediate\",\n        numRows: 16,\n        numCols: 16,\n        numMines: 40\n      },\n      {\n        label: \"Expert\",\n        numRows: 30,\n        numCols: 16,\n        numMines: 99\n      }\n    ];\n    this.difficulty = this.difficulties[0];\n    this.numRows = this.difficulty.numRows;\n    this.numCols = this.difficulty.numCols;\n    this.numMines = this.difficulty.numMines;\n  }\n\n  /**\n   * A function to change the difficulty of the game based on which one the player chooses.\n   * @param label The difficulty that is chosen by the player.\n   */\n  changeDifficulty(label: string) {\n    for (let difficulty of this.difficulties) {\n      if (difficulty.label === label) {\n        this.difficulty = difficulty;\n      }\n    }\n    this.numRows = this.difficulty.numRows;\n    this.numCols = this.difficulty.numCols;\n    this.numMines = this.difficulty.numMines;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Square.html":{"url":"classes/Square.html","title":"class - Square","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Square\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/grid/grid.component.ts\n        \n\n            \n                Description\n            \n            \n                The square class that contains the display properties for the game grid module.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                coord\n                            \n                            \n                                flagged\n                            \n                            \n                                hidden\n                            \n                            \n                                val\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                toggleFlag\n                            \n                            \n                                unhide\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(row: number, col: number, val: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/grid/grid.component.ts:34\n                            \n                        \n\n                \n                    \n                            Initializes the tile that has been selected by the user.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        row\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The row that the selected tile is located in.\n\n                                                        \n                                                \n                                                \n                                                        col\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The column that the selected tile is located in.\n\n                                                        \n                                                \n                                                \n                                                        val\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The value that is on the selected tile (-1 if it is a mine).\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            coord\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Coord\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:14\n                            \n                        \n\n                \n                    \n                        A state variable containing the designated coordinate to modify or view.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flagged\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:29\n                            \n                        \n\n                \n                    \n                        A state variable to determine if a tile is flagged or not.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hidden\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:24\n                            \n                        \n\n                \n                    \n                        A state variable to determine if a tile has been selected or not.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            val\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/app/grid/grid.component.ts:19\n                            \n                        \n\n                \n                    \n                        A state variable containing the number on the tile (-1 if it is a mine).\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toggleFlag\n                        \n                        \n                    \n                \n            \n            \n                \ntoggleFlag()\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid/grid.component.ts:64\n                \n            \n\n\n            \n                \n                    A function to toggle the flag when the player right clicks a tile to either flag or unflag the file.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unhide\n                        \n                        \n                    \n                \n            \n            \n                \nunhide()\n                \n            \n\n\n            \n                \n                    Defined in src/app/grid/grid.component.ts:53\n                \n            \n\n\n            \n                \n                    A function to unhide the tile that the user has selected.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Component, EventEmitter, HostBinding, Input, OnInit, Output } from '@angular/core';\nimport { GridService } from '../grid.service';\nimport { SettingsService } from '../settings.service';\nimport { Coord } from '../types/coord';\nimport { LoggerService } from '../logger.service';\n\n/**\n * The square class that contains the display properties for the game grid module.\n */\nclass Square {\n  /**\n   * A state variable containing the designated coordinate to modify or view.\n   */\n  coord: Coord;\n\n  /**\n   * A state variable containing the number on the tile (-1 if it is a mine).\n   */\n  val: number;\n\n  /**\n   * A state variable to determine if a tile has been selected or not.\n   */\n  hidden: boolean;\n\n  /**\n   * A state variable to determine if a tile is flagged or not.\n   */\n  flagged: boolean;\n\n  /**\n   * @ignore\n   */\n  html: string;\n\n  /**\n   * Initializes the tile that has been selected by the user.\n   * @param row The row that the selected tile is located in.\n   * @param col The column that the selected tile is located in.\n   * @param val The value that is on the selected tile (-1 if it is a mine).\n   */\n  constructor(row: number, col: number, val: number) {\n    this.coord = {row: row, col: col};\n    this.val = val;\n    this.hidden = true;\n    this.flagged = false;\n    this.html = \"\";\n  }\n\n  /**\n   * A function to unhide the tile that the user has selected.\n   */\n  unhide() {\n    this.hidden = false;\n    this.flagged = false;\n    if (this.val !== 0) {\n      this.html = this.val.toString();\n    }\n  }\n\n  /**\n   * A function to toggle the flag when the player right clicks a tile to either flag or unflag the file.\n   */\n  toggleFlag() {\n    if (this.hidden) {\n      this.flagged = !this.flagged;\n    }\n  }\n}\n\n/**\n * The Component for displaying the game grid module logic to the screen.\n */\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.css']\n})\n\n\n/**\n * The game grid module class for displaying the outputs to the screen.\n */\nexport class GridComponent implements OnInit {\n  /**\n   * A state variable to hold the current state of the game grid as a string.\n   */\n  gridString: string;\n\n  /**\n   * A state variable to store the game grid.\n   */\n  squares: Square[];\n\n  /**\n   * A state variable to hold if a new game grid has been generated.\n   */\n  @Output() newGameRenderFinished = new EventEmitter();\n\n  /**\n   * A state variable to determine if the game is over or not.\n   */\n  gameOver = false;\n\n  /**\n   * A state variable to determine if the game over has been triggered or ont yet.\n   */\n  @Output() gameOverTriggered = new EventEmitter();\n\n  /**\n   * Initializes the grid string to an empty string and the squares of the game grid to an empty array.\n   * @param grid The game grid module details.\n   * @param settings The difficulty module details.\n   * @param logger LoggerService details.\n   */\n  constructor(private grid: GridService, private settings: SettingsService, private logger: LoggerService) {\n    this.gridString = \"\";\n    this.squares = [];\n  }\n\n  /**\n   * A function to initialize all of the data in the game grid for displaying to the screen.\n   */\n  ngOnInit(): void {\n    this.gridString = \"[\";\n    for (let row of this.grid.grid) {\n      this.gridString += \"[\";\n      this.gridString += row.join(\",\");\n      this.gridString += \"]\"\n    }\n    this.gridString += \"]\";\n\n    for (let row = 0; row \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimerComponent.html":{"url":"components/TimerComponent.html","title":"component - TimerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  TimerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/timer/timer.component.ts\n\n\n    \n        Description\n    \n    \n        The component for the timer module.\n\n    \n\n\n    \n        Implements\n    \n    \n                    OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-timer\n            \n\n            \n                styleUrls\n                ./timer.component.css\n            \n\n\n\n            \n                templateUrl\n                ./timer.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                time\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                incrementTimer\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                gameStopped\n                            \n                            \n                                resetTimer\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    resetTimer\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        gameStopped\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/timer/timer.component.ts:28\n                            \n                        \n                \n                    \n                        The state variable that the component uses for determining if the timer needs to start or not.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        resetTimer\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/timer/timer.component.ts:76\n                            \n                        \n                \n                    \n                        On the start of a new game, the timer will reset back to zero.\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            incrementTimer\n                        \n                        \n                    \n                \n            \n            \n                \nincrementTimer()\n                \n            \n\n\n            \n                \n                    Defined in src/app/timer/timer.component.ts:48\n                \n            \n\n\n            \n                \n                    Increments the timer and updates the string as necessary if single, double, or\ntriple digits in the time are reached.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app/timer/timer.component.ts:38\n                \n            \n\n\n            \n                \n                    Initializes the timer component for when the application starts.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"000\"\n                        \n                    \n                        \n                            \n                                    Defined in src/app/timer/timer.component.ts:23\n                            \n                        \n\n                \n                    \n                        The state variable that the timer uses for incrementing the timer.\n\n                    \n                \n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        resetTimer\n                    \n                \n\n\n                \n                    \n                        setresetTimer(e: boolean)\n                    \n                \n                            \n                                \n                                    Defined in src/app/timer/timer.component.ts:76\n                                \n                            \n                    \n                        \n                                On the start of a new game, the timer will reset back to zero.\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            e\n                                                    \n                                                            \n                                                                            boolean\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n\n\n    \n        import { Component, Input, OnInit } from '@angular/core';\nimport { LoggerService } from '../logger.service';\n\n/**\n * The component for the timer module.\n */\n@Component({\n  selector: 'app-timer',\n  templateUrl: './timer.component.html',\n  styleUrls: ['./timer.component.css']\n})\n\n/**\n * The class for the timer module of the application.\n * Starts when the player starts the game and stops when the user loses or wins the game.\n * TODO: Pause when the user pauses the game\n * TODO: Resume when the user unpauses the game\n */\nexport class TimerComponent implements OnInit {\n  /**\n   * The state variable that the timer uses for incrementing the timer.\n   */\n  time = \"000\";\n\n  /**\n   * The state variable that the component uses for determining if the timer needs to start or not.\n   */\n  @Input() gameStopped = false;\n\n  /**\n   * @ignore\n   */\n  constructor(private logger: LoggerService) { }\n\n  /**\n   * Initializes the timer component for when the application starts.\n   */\n  ngOnInit(): void {\n    setTimeout(() => {\n      this.incrementTimer();\n    }, 1000);\n  }\n\n  /**\n   * Increments the timer and updates the string as necessary if single, double, or\n   * triple digits in the time are reached.\n   */\n  incrementTimer() {\n    this.logger.log(this.gameStopped);\n    let timeAsNum = parseInt(this.time);\n    timeAsNum++;\n    let timeAsString = timeAsNum.toString();\n    if (timeAsString.length === 1) {\n      this.time = \"00\" + timeAsString;\n    }\n    else if (timeAsString.length === 2) {\n      this.time = \"0\" + timeAsString;\n    }\n    else if (timeAsString.length === 3) {\n      this.time = timeAsString;\n    }\n    else {\n      this.time = \"000\";\n    }\n    if (!this.gameStopped) {\n      setTimeout(() => {\n        this.incrementTimer();\n      }, 1000);\n    }\n  }\n\n  /**\n   * On the start of a new game, the timer will reset back to zero.\n   */\n  @Input()\n  set resetTimer(e: boolean) {\n    this.time = \"000\";\n  }\n\n}\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./timer.component.css\n                \n                :host {\n    color: red;\n    font-size: larger;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'GridComponent', 'selector': 'app-grid'},{'name': 'SettingsComponent', 'selector': 'app-settings'},{'name': 'TimerComponent', 'selector': 'app-timer'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/grid.service.ts\n            \n            injectable\n            GridService\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/app/grid/grid.component.ts\n            \n            component\n            GridComponent\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/app/grid/grid.component.ts\n            \n            class\n            Square\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/settings.service.ts\n            \n            injectable\n            SettingsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/app/settings/settings.component.ts\n            \n            component\n            SettingsComponent\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/app/timer/timer.component.ts\n            \n            component\n            TimerComponent\n            \n                100 %\n                (6/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~11.2.1\n        \n            @angular/common : ~11.2.1\n        \n            @angular/compiler : ~11.2.1\n        \n            @angular/core : ~11.2.1\n        \n            @angular/forms : ~11.2.1\n        \n            @angular/platform-browser : ~11.2.1\n        \n            @angular/platform-browser-dynamic : ~11.2.1\n        \n            @angular/router : ~11.2.1\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.0.0\n        \n            zone.js : ~0.11.3\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngularApp\nThis project was generated with Angular CLI version 11.2.1.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The app will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory. Use the --prod flag for a production build.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via Protractor.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nGridComponent\n\nGridComponent\n\nAppModule -->\n\nGridComponent->AppModule\n\n\n\n\n\nSettingsComponent\n\nSettingsComponent\n\nAppModule -->\n\nSettingsComponent->AppModule\n\n\n\n\n\nTimerComponent\n\nTimerComponent\n\nAppModule -->\n\nTimerComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Components\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        0 \n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Coord   (src/.../coord.ts)\n                        \n                        \n                            Difficulty   (src/.../difficulty.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/types/coord.ts\n    \n    \n        \n            \n                \n                    \n                    Coord\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/app/types/difficulty.ts\n    \n    \n        \n            \n                \n                    \n                    Difficulty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
